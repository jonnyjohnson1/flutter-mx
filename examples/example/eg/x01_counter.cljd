(ns example.eg.x01-counter
  (:require
    ["package:flutter/material.dart" :as m]
    ["package:flutter/painting.dart" :as p]
    [tilton.mx.model.base :refer [md-cell md-install-cell md-awaken]]
    [tilton.mx.api :refer [dp minfo cF cF+ cI cFn cFonce mmx-md mget mset! mswap! fm* fmu fasc mav] :as mx]
    [tilton.fmx.api :as fx
     :refer [dart-cb within-ctx
             material-app scaffold app-bar floating-action-button
             center column text sized-box]]))

(defn make-app []
  (material-app
    {:title "Flutter/MX Counter Demo"
     :theme (m/ThemeData .useMaterial3 true
              .colorScheme (m/ColorScheme.fromSeed
                             .seedColor m/Colors.deepPurple))}
    (scaffold
      {:appBar               (app-bar
                               {:title           (m/Text "Flutter/MX Counter")
                                :backgroundColor (cF (.-inversePrimary
                                                       (.-colorScheme ^m/ThemeData (mav :theme))))})
       :floatingActionButton (floating-action-button
                               {:onPressed (dart-cb []
                                             (mswap! (fm* :counter) :value inc))
                                :tooltip   "Increment"}
                               (m/Icon m/Icons.add .color m/Colors.black))}
      (center
        (column {:mainAxisAlignment m/MainAxisAlignment.center}
          (text {:style (-> (m/Theme.of (fx/*ctx)) .-textTheme .-displaySmall)
                 ;;; this silliness is a test to see if the engine can propagate to setState
                 ;; when the reactivity is embedded in a delegate model, the text-style. So far so good.
                 ;; If it fails, try just wrapping the non-updating widget in `(fx/stateful-builder....)`
                 #_(cF (fx/text-style
                         {:color    m/Colors.black
                          :fontSize (cF (+ 24.0 (* 1.0 (mget (fm* :counter) :value))))}))}
            "Button push count:")
          (sized-box
            {:height 28.0})
          (text
            {:style (-> (m/Theme.of (fx/*ctx)) .-textTheme .-displayMedium)}
            {:name  :counter
             :value (cI 0)}
            (str (mget me :value))))))))




