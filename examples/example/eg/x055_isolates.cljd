(ns example.eg.x055_isolates
  "An example following https://stackoverflow.com/questions/36500139/encapsulate-repeated-send-responses-to-the-same-dart-isolate-within-a-single-asy"
  (:require ["package:flutter/material.dart" :as m]
            ["dart:isolate" :as di]
            ["dart:core" :as dc]
            [cljd.flutter :as f]
            [tilton.mx.api :as mx
             :refer [dp dpx cI cF cF+ cF+n cFn cFonce mget mget? mset! mswap! minfo fasc fasc-inc
                     fm* fmu mav muv mx-bound? wmx-iso cinfo]]
            [tilton.fmx.api :as fx
             :refer [material-app ink-well container scaffold center intrinsic-width
                     sized-box column text-field text card]]))

(defn message-entry []
  (text-field
    {:autofocus  true
     :focusNode  (m/FocusNode)
     :controller (cFonce (fx/text-field-controller-basic me))
     :decoration (m/InputDecoration
                   .border (m/OutlineInputBorder
                             .borderRadius (m/BorderRadius.circular 0.0))
                   .labelText "Enter a message")}
    {:name  :message-entry
     :value (cI "tst msg")}))

(defn type-entry []
  (text-field
    {:controller (cFonce (fx/text-field-controller-basic me))
     :decoration (m/InputDecoration
                   .border (m/OutlineInputBorder
                             .borderRadius (m/BorderRadius.circular 0.0))
                   .labelText "Enter a Type")}
    {:name  :type-entry
     :value (cI "tst type")}))

(defn heavy-computation-task
  [my-send-port]
  (let [my-receive-port (di/ReceivePort)]
    (->> my-receive-port
      .-sendPort
      (.send ^di/SendPort my-send-port))
    (-> my-receive-port
      (.forEach
        (fn [[my-message
              my-message-type
              my-response-send-port]]
          (.send ^di/SendPort
            my-response-send-port
            (str [my-message
                  my-message-type])))))))

(defn isolate-trigger!
  [receive-port
   response-receive-port
   {::keys [message-box type]}]
  (let [my-send-port (await (.-first ^di/ReceivePort receive-port))]
    (.send ^di/SendPort
      my-send-port
      [message-box
       type
       (.-sendPort ^di/ReceivePort response-receive-port)])))

(defn tap-to-test []
  (card
    {:shape (m/RoundedRectangleBorder
              .borderRadius (m/BorderRadius.circular 0.0))}
    {:name  :my-response
     :value (cI nil)}
    (ink-well
      {:onTap (cF (fn []
                    (let [msg-text (muv :message-entry)
                          typ-text (muv :type-entry)
                          my-response-receive-port (di/ReceivePort)]
                      (isolate-trigger! (await (let [my-receive-port (di/ReceivePort)]
                                                 (di/Isolate.spawn heavy-computation-task
                                                   (.-sendPort my-receive-port))
                                                 my-receive-port))
                        my-response-receive-port
                        {::type        typ-text
                         ::message-box msg-text})
                      (when-let [response-from-port (await (.-first my-response-receive-port))]
                        (dp :Me (minfo me))
                        (mset! (fmu :my-response) :value response-from-port)))))}
      (container
        {:width 150 :height 80
         :color (m/Colors.blue.-shade200)}
        (center
          (text "Tap to Test Isolates!"))))))

(defn response-display []
  (card
    {:shape (m/RoundedRectangleBorder
              .borderRadius (m/BorderRadius.circular 0.0))
     :color (m/Colors.lightGreenAccent.-shade700)}
    (text (or (muv :my-response) "Waiting for Isolate response!"))))

(defn make-app []
  (let [title "Test Isolates!"]
    (fx/material-app
      {:title title
       :theme (m/ThemeData
                .useMaterial3 true)}
      (fx/scaffold
        {:appBar (fx/app-bar {:title (fx/text title)})}
        (center
          (intrinsic-width
            (column {:crossAxisAlignment m/CrossAxisAlignment.stretch
                     :mainAxisAlignment  m/MainAxisAlignment.center}
              (response-display)
              (tap-to-test)
              (sized-box {:height 15})
              (message-entry)
              (sized-box {:height 5})
              (type-entry))))))))
