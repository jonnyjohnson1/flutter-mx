(ns example.eg.x070-speech-to-text
  (:require
    ["package:flutter/material.dart" :as m]
    ["package:flutter/painting.dart" :as p]

    ;; --- https://pub.dev/packages/speech_to_text -------------
    ["package:speech_to_text/speech_to_text.dart" :as s2t]
    ["package:speech_to_text_platform_interface/speech_to_text_platform_interface.dart" :as s2tpi]
    ["package:speech_to_text/speech_recognition_error.dart" :as s2te]
    ["package:speech_to_text/speech_recognition_result.dart" :as s2tr]
    [tilton.mx.model.base :refer [md-cell md-install-cell md-awaken]]
    [tilton.mx.api :refer [dp dpx minfo cF cF+ cI cFn cFonce mmx-md mget mset! mswap! mupdate! fm* fmu fasc mav] :as mx]
    [tilton.fmx.api :as fx
     :refer [dart-cb within-ctx
             material-app scaffold app-bar floating-action-button
             center column text sized-box]]))

; !!!!!!!!!!!!!!!!!! IMPORTANT !!!!!!!!!!!!!!!!!!!!!!!!!
; !!!!!!!!!!!!!!!!!! IMPORTANT !!!!!!!!!!!!!!!!!!!!!!!!!
; !!!!!!!!!!!!!!!!!! IMPORTANT !!!!!!!!!!!!!!!!!!!!!!!!!
; !!!!!!!!!!!!!!!!!! IMPORTANT !!!!!!!!!!!!!!!!!!!!!!!!!
;
; The app's ios/Runner/Info.plist  must contain an NSSpeechRecognitionUsageDescription key
; with a string value explaining to the user how the app uses this data.
; Likewise, specify a NSMicrophoneUsageDescription.
; Easiest way to edit is to double-click Info.plist, found at the path shown.

; DISCLAIMER: this example is quite rough and just shows how to get some transcription
; working, more or less. Work will continue in a full-blown multi-file demo app derived
; from the existing Text-to-speech demo, where we will try to create a voice chat app.
; This app will expose GUI controls for various Speech-to-text options.
;
; USAGE: Watch your console to see when transcription actually begins!
; When you see:
; flutter: :DPR> :starting-listening
; ...(not really, the app just kicks off listen)
;
; Next you will see:
; flutter: :DPR> :sp-status!!!!!!!!!!!! listening
; ...this message is from the package and is accurate

; Fun note: I tested with fr-FR as locale ID because my accent is pretty good, and
; it did recognize my HS French. Mrs. Willens would be proud.

; PROBLEM:
; Hot reload does not seem to be enough. Jump to the console an hit return
; to trigger a restart.

(defmacro try-wmx-iso [& body]
  `(try
     (tilton.mx.api/wmx-iso ~@body)
     (catch Exception e#
       (dp :FLUTTERCATCH!! e#))))

(defn stop-listening [app]
  (dp :stop-FNYI))

(defn start-listening [ear]
  (dp :starting-listening)
  (let [s ^s2t/SpeechToText (mget ear :speech)
        options (s2tpi/SpeechListenOptions
                  ;;.sampleRate 44100 CAUTION this breaks listening, requiring exit of ear
                  .cancelOnError true
                  .listenMode s2t/ListenMode.dictation      ;; search | confirmation | dictation
                  .autoPunctuation true)
        result-listener (fn [^s2tr/SpeechRecognitionResult r]
                          (let [wds (.-recognizedWords r)]
                            (dp :result-words!! wds)

                            (when (.-finalResult r)
                              (dp :result-final!! wds)
                              (try-wmx-iso
                                (let [me ear]
                                  (mset! (fm* :transcript) :value wds)))
                              (dp :stopping)
                              (.stop s))))]
    (.listen s .onResult result-listener
      .listenFor (Duration .seconds 20)
      .pauseFor (Duration .seconds 3)
      .localeId (mget ear :system-locale-id)                ;; "fr-FR"
      .listenOptions options)))

(defn stat-ltr [me status]
  (try-wmx-iso
    (dp :stat-ltr-status (keyword status))
    (mset! me :status (keyword status))))

(defn make-ear []
  (fx/material {:shape        (m/CircleBorder)
                :clipBehavior m/Clip.antiAlias
                :color        (cF (case (mget me :status)
                                    :available m/Colors.cyan
                                    m/Colors.red))
                :elevation    4.0}
    {:name             :ear
     :speech           (cF+ [:watch (fn [_ me sp _ _]
                                      (dp :sp!!!!! sp)
                                      (dp :avail (.-isAvailable ^s2t/SpeechToText sp))
                                      (try-wmx-iso
                                        (mset! me :status
                                          (cond
                                            (.-isAvailable ^s2t/SpeechToText sp) :available
                                            :else :unavailable))))]
                         (s2t/SpeechToText))
     :status           (cI nil :watch (fn [_ me new _ _]
                                        (dp :ear-status!!!!!!!! new)))
     :has-speech?      (cF+ [:async? true
                             :watch (fn [_ me new _ _]
                                      (dp :has-speech? new))]
                         (when-let [^s2t/SpeechToText sp (mget me :speech)]
                           (.initialize sp
                             .onStatus (fn [status]
                                         (stat-ltr me status))
                             .onError (fn [^s2te/SpeechRecognitionError err]
                                        (dp :sp-error! (.-errorMsg err))
                                        (try-wmx-iso
                                          (mset! (fm* :transcript) :value
                                            (str "Error: " (.-errorMsg err))))))))
     :locale-names     (cF+ [:async? true]
                         (when (mget me :has-speech?)
                           (.locales ^s2t/SpeechToText (mget me :speech))))
     :system-locale-id (cF+ [:async? true
                             :watch (fn [_ _ new _ _] (dp :loc-sys-id-2 new))]
                         (when-let [lox-names (mget me :locale-names)] ;;  (mget me :has-speech?)
                           (let [sys-loc (await
                                           (.systemLocale ^s2t/SpeechToText (mget me :speech)))]
                             (dpx :sys-loc!!!!!! (.-localeId ^s2t/LocaleName sys-loc))
                             (.-localeId ^s2t/LocaleName sys-loc))))
     :recording?       (cI false
                         :ephemeral? true
                         :watch (fn [_ me new _ _]
                                  (dp :recording!!! new)
                                  (when new
                                    (start-listening (fm* :ear)))))}
    (fx/icon-button
      {:onPressed (dart-cb []
                    (dp :ears-two!!!!!!!!!!!))
       :icon      (m/Icon m/Icons.hearing)
       :color     (cF (fx/within-ctx [me ctx]
                        (dp :mavstatus (mav :status))
                        m/Colors.black #_(case (mav :status)
                                           :available m/Colors.cyan
                                           m/Colors.red)))})))

;;; --- make app -----------------------------------------------

(defn make-app []
  (material-app
    {:title "Flutter/MX Speech->Text Demo"
     :theme (m/ThemeData .useMaterial3 true
              .colorScheme (m/ColorScheme.fromSeed
                             .seedColor m/Colors.deepPurple))}
    {}
    (scaffold
      {:appBar               (app-bar
                               {:title           (m/Text "Flutter/MX Dicto")
                                :backgroundColor (cF (.-inversePrimary
                                                       (.-colorScheme ^m/ThemeData (mav :theme))))})
       :floatingActionButton (floating-action-button
                               {:onPressed (dart-cb []
                                             (start-listening (fm* :ear)))
                                :tooltip   "Transcribe"}
                               (m/Icon m/Icons.mic .color m/Colors.black))}
      (center
        (column {:mainAxisAlignment m/MainAxisAlignment.center}
          (make-ear)
          (text {:style (-> (m/Theme.of (fx/*ctx)) .-textTheme .-displaySmall)}
            "You said:")
          (sized-box
            {:height 28.0})
          (text
            {:style (-> (m/Theme.of (fx/*ctx)) .-textTheme .-displaySmall)}
            {:name  :transcript
             :value (cI "(click mic and speak)")}
            (str (mget me :value))))))))




