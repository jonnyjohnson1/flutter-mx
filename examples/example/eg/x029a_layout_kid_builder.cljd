(ns example.eg.x029a-layout-kid-builder
  (:require
    ["dart:math" :as math]
    ["package:flutter/widgets.dart" :as w]
    ["package:flutter/material.dart" :as m]
    ["package:flutter/painting.dart" :as p]
    ["dart:async" :as async]
    [tilton.mx.cell.base :as cb]
    [tilton.mx.api :refer [dp dpx cF cF+ cI mget mmx-md fm* fasc faprop muv minfo mset! fmu] :as mx]
    [tilton.fmx.api :refer [dart-cb within-ctx] :as fx]))


(defn make-app []
  (let [title "Seamless Layout Builder/Built"]
    (fx/material-app
      {:title title}
      {:name    :the-app
       :msg     "\"Hi, Mom!\" "
       :elapsed (cI 0)}
      (fx/scaffold
        {:appBar (fx/app-bar {:title (fx/text title)})}
        (fx/center {}
          {:csz (cF+ [:watch (fn [_ me new _ _]
                                 (dp :CSZ!!! new))]
                  (let [f (fm* :test-input)]
                    (dp :TI!!!! f)
                    f))}
          (fx/layout-kid-builder
            ;;
            ;; for now, we must use the hard-coded :box-constraints to get that build parameter.
            ;; We could make this parameterizable, but builders are passed boxConstraints -- why
            ;; make that tailorable? Ah, because the builder mechanism is a general one. Well, layout-builder
            ;; takes BoxConstraints....they will be nil until the builder fn is invoked.
            ;;
            ;; Below we build no structure until we get a box, so navigation into this
            ;; structure will not work until then.
            ;;
            ;; Alternatively, we could go ahead and build the structure without the box info,
            ;; defaulting places where we intend to use the box. :box-constraints is a formula
            ;; cell, so everything needing a box will calculate JIT when the builder is called--
            ;; internals mset! :box-constraints just before calling fx-render.
            ;;
            ;; KNOWN BUG: see x029 version of this (one vertical orientation does not trigger rebuild)

            (let [box ^m/BoxConstraints (or (mget me :box-constraints)
                                           (m/BoxConstraints .maxHeight 0 .maxWidth 0))]
              ;; we can also when-let and not offer the default, but then
              ;; navigation tofind test-input will fail. Another approach would be not to default.
              ;; but then all attempts to deref box would have to be ready for nil.
              (fx/center
                (fx/padding {:padding (m/EdgeInsets.all 20)}
                  (fx/column {:mainAxisAlignment m/MainAxisAlignment.spaceEvenly}
                    (when (> (.-maxHeight box) 600)
                      (fx/text
                        {:style (p/TextStyle
                                  .color m/Colors.blue
                                  .fontSize 24)}
                        {:name :test}
                        "Rotate the device or sim to see layout effect."))
                    (fx/text
                      {:style (p/TextStyle
                                .color m/Colors.blue
                                .fontSize 16)}
                      {:name :test}
                      "Use âŒ˜-arrows to rotate sim.")
                    (fx/text-field {:controller (m/TextEditingController
                                                  .text "Hi, Mom.")}
                      {:name :test-input})
                    (fx/text
                      {:style (within-ctx [me ctx]
                                (p/TextStyle
                                  .color (mget me :font-color)
                                  .fontSize (mget me :font-size)))}
                      {:name :fsz
                       :font-size  (cF (* 0.03 (.-maxHeight box)))
                       :font-color (cF (cond
                                         (> (mget me :font-size) 25) m/Colors.red
                                         :else m/Colors.cyan))}
                      (str "nothing to see here "
                        "\nin font size "
                        (/ (int (* 10 (mget me :font-size))) 10)))))))))))))



