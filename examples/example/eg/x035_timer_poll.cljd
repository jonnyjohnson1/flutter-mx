(ns example.eg.x035-timer-poll
  (:require
    ["dart:math" :as math]
    ["dart:async" :as async]
    ["package:flutter/widgets.dart" :as w]
    ["package:flutter/material.dart" :as m]
    ["package:flutter/painting.dart" :as p]
    ["package:http/http.dart" :as dht]
    [tilton.mx.cell.base :as cb]
    [tilton.mx.api :refer [wmx-iso dp dpx cF cF+ cI mget mswap! mset! mav fasc fm* muv fmu minfo] :as mx]
    [tilton.fmx.api :refer [dart-cb] :as fx]))

;;; This is a half-baked example that shows a widget dispatching
;;; HTTP requests as cued by a timer.
;;;
;;; We demonstrate a "fetch" widget creating a timer and, when the user
;;; decides to stop fetching, we destroy the widget, triggering an
;;; on-quiesce handler on the cell that spawned the timer, to cancel the timer.
;;;
;;; The HTTP request alternates between checking fda.gov for adverse events on "dogs" (none) and "cats" (successful).

(defn make-app []
  (fx/material-app
    {:title "Flutter/MX Counter Demo"
     :theme (m/ThemeData .primarySwatch m/Colors.blue)}
    (fx/scaffold
      {:appBar               (fx/app-bar
                               {:title (m/Text "Flutter/MX Timer Life-Cycle")})
       :floatingActionButton (cF (fx/floating-action-button
                                   {:onPressed (dart-cb []
                                                 (mswap! (fmu :scaffo) :show-time? not))
                                    :tooltip   "Toggle Time"}
                                   (if (mget (fmu :scaffo) :show-time?)
                                     (m/Icon m/Icons.stop_rounded
                                       .color m/Colors.white)
                                     (m/Icon m/Icons.download_rounded
                                       .color m/Colors.black))))}
      {:name       :scaffo
       :show-time? (cI true)}
      (fx/center
        (fx/wrap {:direction          m/Axis.vertical
                  :crossAxisAlignment m/WrapCrossAlignment.center
                  :spacing            40}
          (fx/text {:style (p/TextStyle .color m/Colors.black
                             .fontStyle m/FontStyle.italic
                             .fontSize 12.0)}
            "(Tap FAB to start/stop fetching.)")

          (fx/container {}
            (when (mget (fasc :scaffo) :show-time?)
              (fx/text {:style (p/TextStyle .color m/Colors.black
                                 .fontSize 18.0)}
                {:name  :shotime
                 :clock (cF+ [:on-quiesce (fn [c] (when-let [tmr ^async/Timer (cb/c-value c)]
                                                    (.cancel tmr)))]
                          (async/Timer.periodic (Duration .seconds 3)
                            (fn [^async/Timer tmr]
                              (wmx-iso
                                (mset! (fmu :counter) :value (.-tick tmr))))))}
                "Making fetch #")))
          (fx/text
            {:style (fx/within-ctx [me ctx]
                      (.-headlineMedium (.-textTheme (m/Theme.of ctx))))}
            {:name  :counter
             :value (cI 0)}
            (str (mav :value)))
          (fx/text {}
            {:name      :ae-says
             :ae-lookup (cF+ [:async? true
                              :async-then (fn [c lookup]
                                            (= 200 (.-statusCode ^dht/Response lookup)))]
                          (when-not (zero? (muv :counter))
                            (dht/get (.https Uri "api.fda.gov" "drug/event.json"
                                       {"limit"  "1"
                                        "search" (str "patient.drug.openfda.brand_name:"
                                                   (if (odd? (muv :counter))
                                                     "dogs" "cats"))}))))}
            (str "NIH AE search says " (mget me :ae-lookup))))))))