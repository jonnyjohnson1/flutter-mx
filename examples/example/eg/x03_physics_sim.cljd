(ns example.eg.x03-physics-sim
  (:require
    ["package:flutter/widgets.dart"
     :refer [Text State StatefulWidget StatelessWidget] :as w]
    ["package:flutter/physics.dart" :as p]
    ["package:flutter/material.dart" :as m
     :refer [MainAxisAlignment MediaQuery Colors Theme Icon AnimationController Icons ThemeData runApp AppBar State]]
    ["package:flutter/painting.dart"
     :refer [TextStyle Alignment]]
    [tilton.mx.base :refer [dprn dp dpx]]

    [tilton.mx.api :refer [minfo cF cI make mget mmx-md cFkids fmu muv mav wmx-iso] :as mx]
    [tilton.fmx.api :as fx :refer [within-ctx]]))

(defn make-app []
  (let [title (str "Physics Animation")]
    (fx/material-app {:title title}
      (fx/scaffold
        {:appBar (fx/app-bar {:title (fx/text title)})}
        (draggable-card
          :drag-child (fx/flutter-logo {:size 128.0} {}))))))

(defn draggable-card [& {:keys [drag-child]}]
  (fx/ticker-mode
    {:enabled true}
    (fx/gesture-detector
      {:onPanDown   (within-ctx [me ctx]
                      (fn [^m/DragDownDetails details]
                        (let [c (fx/my-controller :panDown)]
                          (assert c (str "Draggable-card pandown no controler in "
                                      (minfo me)))
                          (.stop c))))
       :onPanUpdate (fx/within-ctx [me ctx]
                      (fn [^m/DragUpdateDetails details]
                        (let [size (.-size (MediaQuery/of ctx))]
                          (wmx-iso
                            (mx/mswap! me :dragAlignment
                              #(.+ ^m/Alignment %
                                 (m/Alignment
                                   (/ (-> details .-delta .-dx) (/ (.-width size) 2))
                                   (/ (-> details .-delta .-dy) (/ (.-height size) 2)))))))))
       :onPanEnd    (fx/within-ctx [me ctx]
                      (fn [^m/DragEndDetails details]
                        (logo-recoil me ctx (-> details .-velocity .-pixelsPerSecond))))}
      {:name          :draggo
       :ticker-mixin  true
       :initState     (fn [state me]
                        ;; todo dispose this controller
                        (mx/rmap-set! [:controller me]
                          (m/AnimationController .vsync state)))
       :dragAlignment (cI m/Alignment.center)
       :dispose       (fn [this me]
                        ;; todo test that this is being called
                        (when-let [con ^m/AnimationController? (fx/my-controller? :dispose)]
                          (dp :x03-disposing!!! con)
                          (.dispose con)))}
      (fx/align
        {:alignment (cF (mav :dragAlignment))}
        (fx/card drag-child)))))

(defn logo-recoil [me ctx ^m/Offset px-per-s]
  (let [size (.-size (MediaQuery/of ctx))
        controller (fx/my-controller :recoil)
        animation ^#/(m/Animation Alignment) (.drive controller
                                               (m/AlignmentTween
                                                 .begin (mget me :dragAlignment)
                                                 .end m/Alignment.center))
        units-per-s (m/Offset (/ (.-dx px-per-s) (.-width size))
                      (/ (.-dy px-per-s) (.-height size)))
        unit-velocity (.-distance units-per-s)
        spring (p/SpringDescription
                 .mass 30
                 .stiffness 1
                 .damping 1)
        simulation (p/SpringSimulation spring 0 1 (- unit-velocity))]
    (doto controller
      .clearListeners
      (.addListener #(mx/mset! me :dragAlignment (.-value animation))) ;; <==== dataflow trigger
      (.animateWith simulation))))