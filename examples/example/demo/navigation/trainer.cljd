(ns example.demo.navigation.trainer
  (:require
    ["package:flutter/material.dart" :as m]
    ["package:flutter/painting.dart" :as p]
    [tilton.mx.model.base :refer [md-cell md-install-cell md-awaken]]
    [tilton.mx.api :refer [dp minfo cF cFI cF+ cI cFn cFonce mmx-md mget mset! mswap! navig fm* fmu fasc mav] :as mx]
    [tilton.fmx.api :as fx
     :refer [dart-cb within-ctx
             material-app scaffold app-bar floating-action-button
             center column row container text-button text sized-box]]

    [example.demo.navigation.puzzle :as pz
     :refer [mk-puzzle pz-zero pz-structure pz-nvg-options]]
    [example.demo.navigation.component :refer [nvg-solution]]))

; todo - structure extract utility
; todo - do sth with dbg option
; todo - 'what' text-field

(defn make-app []
  (material-app
    {:title "Flutter/MX Navigation Trainer"
     :theme (m/ThemeData .useMaterial3 true
              .colorScheme (m/ColorScheme.fromSeed
                             .seedColor m/Colors.teal.shade300))}
    (scaffold
      {:appBar (app-bar
                 {:title           (m/Text "Flutter/MX Navigation Trainer")
                  :backgroundColor (cF (.-inversePrimary
                                         (.-colorScheme ^m/ThemeData (mav :theme))))})

       :floatingActionButton
       (floating-action-button
         {:onPressed (dart-cb []
                       #_(mswap! (fm* :counter) :value inc))
          :tooltip   "Increment"}
         (m/Icon m/Icons.add .color m/Colors.black))}
      {:name           :scaffy
       :puzzle-factory (cI pz-zero)}
      (center
        (column {}
          {:puzzle      (cF (mk-puzzle (mav :puzzle-factory)))
           :nvg-options (cFI (pz-nvg-options (mav :puzzle)))}
          (md-tree :app #_(pz-structure (mav :puzzle)))
          (nvg-solution))))))

(defn md-tree [tr]
  (dp :tree-md tr)
  (container
    {:constraints (m/BoxConstraints .minHeight 24)
     :margin      (m/EdgeInsets.all 3)
     :decoration  (cF (fx/box-decoration
                        {:border (cF (.all m/Border .color m/Colors.blue .width 0.5))
                         :color  m/Colors.grey.shade50}))}
    ; possibilities:
    ;  just a model name such as :my-label, no props, no children, distinguished by tr being a keyword (or type?)
    ;  just a vector pair, model and props, distinguished by props being a map;
    ;    nb a prop value might be a md-tree
    ;  a vector pair of a model and its kids, distinguished by the kids being a vector
    (cond
      (keyword? tr)
      (model-view tr)
      #_#_ :else
      (column
        {:mainAxisAlignment m/MainAxisAlignment.center}
        (model md)
        (row
          {:mainAxisAlignment  m/MainAxisAlignment.spaceEvenly
           :crossAxisAlignment m/CrossAxisAlignment.start}
          (mapv (fn [kid]
                  (cond
                    (keyword? kid) (model kid {})
                    :else (tree (first kid) (second kid))))
            kids))))))

#_
(defn model [md]
  (cond
    (keyword? md) (model-props md nil)
    (vector? md) (do (assert (and (= 2 (count md)
                                    (keyword? (first md))
                                    (map? (second md)))))
                     (model-props (first md) (second md)))))

(defn model-props [md props]
  (cond
    (nil? props)
    (model-view md)
    :else (container
            {:constraints (m/BoxConstraints .minHeight 24)
             :margin      (m/EdgeInsets.all 6)
             :decoration  (cF (fx/box-decoration
                                {;:border (cF (.all m/Border .color m/Colors.blue .width 1))
                                 :color (.-shade50 m/Colors.cyan)}))}
            (column
              (model-view md)
              (props-view props)))))

(defn model-view [md]
  (container
    {:constraints (m/BoxConstraints .minHeight 24)
     :margin      (m/EdgeInsets.all 3)
     :decoration  (cF (fx/box-decoration
                        {;:border (cF (.all m/Border .color m/Colors.blue .width 1))
                         :color (.-shade50 m/Colors.red)}))}
    (fx/text {:style (p/TextStyle
                       ;.color (mget me :font-color)
                       .fontSize 18)}
      (str (name md)))))

(defn props-view [props])

#_(fx/text
    {:style (within-ctx [me ctx]
              (p/TextStyle
                .color (mget me :font-color)
                .fontSize (mget me :font-size)))}
    {:name       :fsz
     :font-size  (cF (* 0.03 (.-maxHeight box)))
     :font-color (cF (cond
                       (> (mget me :font-size) 25) m/Colors.red
                       :else m/Colors.cyan))}
    (str (mget (fasc :the-app) :msg)
      "\nin font size "
      (/ (int (* 10 (mget me :font-size))) 10)))

#_(center
    (fx/text-button
      {:onPressed (dart-cb []
                    #_(mset! selector
                        :selection completion-enum))
       :style     (cF (m/ButtonStyle .foregroundColor
                        (if (mget me :selected?)
                          (m/MaterialStateProperty.resolveWith
                            (fn [s]
                              m/Colors.blue))
                          (m/MaterialStateProperty.resolveWith
                            (fn [s] m/Colors.black)))))}
      {:name      :me
       :selected? (cF true #_(= completion-enum
                               (mget selector :selection)))}
      (m/Text (str (:name @me)))))

#_(defn lang-button [i lang]
    (fx/gesture-detector
      {:key   (m/ValueKey. lang)
       :onTap (dart-cb []
                (mset! (app-fts) :lg-current
                  (first (get (app-lang-geos) lang))))}
      (container
        {:decoration (cF (fx/box-decoration
                           {:border (cF (when (= lang (app-fts-lang))
                                          (.all m/Border .color m/Colors.blue .width 2)))
                            :color  (.-shade50 (cond
                                                 (even? i) m/Colors.blue
                                                 :else m/Colors.yellow))}))}
        (center
          (padding {:padding (m/EdgeInsets.all 4.0)}
            (fx/text
              {:style (p/TextStyle .color m/Colors.black
                        .fontSize 16.0)}
              lang))))))


