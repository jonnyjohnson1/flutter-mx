(ns example.demo.navigation.trainer
  (:require
    ["package:flutter/material.dart" :as m]
    ["package:flutter/painting.dart" :as p]
    [tilton.mx.model.base :refer [md-cell md-install-cell md-awaken]]
    [tilton.mx.api :refer [dp minfo cF cF+ cI cFn cFonce mmx-md mget mset! mswap! navig fm* fmu fasc mav] :as mx]
    [tilton.fmx.api :as fx
     :refer [dart-cb within-ctx
             material-app scaffold app-bar floating-action-button
             center column row container text-button text sized-box]]))

(defn make-app []
  (material-app
    {:title "Flutter/MX Navigation Trainer"
     :theme (m/ThemeData .useMaterial3 true
              .colorScheme (m/ColorScheme.fromSeed
                             .seedColor m/Colors.deepPurple))}
    (scaffold
      {:appBar (app-bar
                 {:title           (m/Text "Flutter/MX Navigation Trainer")
                  :backgroundColor (cF (.-inversePrimary
                                         (.-colorScheme ^m/ThemeData (mav :theme))))})

       :floatingActionButton
       (floating-action-button
         {:onPressed (dart-cb []
                       #_(mswap! (fm* :counter) :value inc))
          :tooltip   "Increment"}
         (m/Icon m/Icons.add .color m/Colors.black))}
      (column {}
        {:nvg-options (cI {:me? false :inside? false :out true :out-asc-only false :without-dependency? true :must? true})}
        (tree :app [[:scaffy [[:app-bar [:aaa :bbb [:ccc [:dddd :eeee]]]]
                              [:body [[:aa [:aaa]]
                                      [:aa [:aaa]]
                                      :bbb]]
                              [:drawer [[:aa [:aaa]]
                                        [:aa [:aaa]]
                                        :bbb]]
                              :fab]]])
        (row
          (navig-option :must?)
          (navig-option :me?)
          (navig-option :inside?)
          (navig-option :out)
          (navig-option :out-asc-only))))))

(defn navig-option [option]
  (fx/sized-box {:width 200}
    (fx/checkbox-list-tile
      {:key             (m/ValueKey (name option))
       :controlAffinity m/ListTileControlAffinity.leading
       :title           (m/Text (name option))
       :value           (cF (get (mav :nvg-options) option))
       :onChanged       (dart-cb [on-off]
                          (mswap! (mav :nvg-options) option not))})))

(defn tree
  ([name] (tree name []))
  ([name kids]

   (container
     {:constraints (m/BoxConstraints .minHeight 24)
      :margin      (m/EdgeInsets.all 9)
      :decoration  (cF (fx/box-decoration
                         {:border (cF (.all m/Border .color m/Colors.blue .width 0.5))
                          :color  (.-shade50 m/Colors.blue)}))}
     (cond
       (seq kids)
       (column
         {:mainAxisAlignment m/MainAxisAlignment.center}
         (node name)
         (row
           {:mainAxisAlignment  m/MainAxisAlignment.spaceEvenly
            :crossAxisAlignment m/CrossAxisAlignment.start}
           (mapv (fn [kid]
                   (if (keyword? kid)
                     (node kid)
                     (tree (first kid) (second kid))))
             kids)))
       :else (node (str name))))))

(defn node [name]
  (container
    {:constraints (m/BoxConstraints .minHeight 24)
     :margin      (m/EdgeInsets.all 16)
     :decoration  (cF (fx/box-decoration
                        {;:border (cF (.all m/Border .color m/Colors.blue .width 1))
                         :color (.-shade50 m/Colors.yellow)}))}
    (fx/text {:style (p/TextStyle
                       ;.color (mget me :font-color)
                       .fontSize 18)}
      (str name))))

#_(fx/text
    {:style (within-ctx [me ctx]
              (p/TextStyle
                .color (mget me :font-color)
                .fontSize (mget me :font-size)))}
    {:name       :fsz
     :font-size  (cF (* 0.03 (.-maxHeight box)))
     :font-color (cF (cond
                       (> (mget me :font-size) 25) m/Colors.red
                       :else m/Colors.cyan))}
    (str (mget (fasc :the-app) :msg)
      "\nin font size "
      (/ (int (* 10 (mget me :font-size))) 10)))

#_(center
    (fx/text-button
      {:onPressed (dart-cb []
                    #_(mset! selector
                        :selection completion-enum))
       :style     (cF (m/ButtonStyle .foregroundColor
                        (if (mget me :selected?)
                          (m/MaterialStateProperty.resolveWith
                            (fn [s]
                              m/Colors.blue))
                          (m/MaterialStateProperty.resolveWith
                            (fn [s] m/Colors.black)))))}
      {:name      :me
       :selected? (cF true #_(= completion-enum
                               (mget selector :selection)))}
      (m/Text (str (:name @me)))))

#_(defn lang-button [i lang]
    (fx/gesture-detector
      {:key   (m/ValueKey. lang)
       :onTap (dart-cb []
                (mset! (app-fts) :lg-current
                  (first (get (app-lang-geos) lang))))}
      (container
        {:decoration (cF (fx/box-decoration
                           {:border (cF (when (= lang (app-fts-lang))
                                          (.all m/Border .color m/Colors.blue .width 2)))
                            :color  (.-shade50 (cond
                                                 (even? i) m/Colors.blue
                                                 :else m/Colors.yellow))}))}
        (center
          (padding {:padding (m/EdgeInsets.all 4.0)}
            (fx/text
              {:style (p/TextStyle .color m/Colors.black
                        .fontSize 16.0)}
              lang))))))


