(ns example.demo.isolate.common
  (:require
    ["package:flutter/gestures.dart" :as g]
    ["dart:io" :as io]
    ["package:flutter/material.dart" :as m
     :refer [Canvas Size]]
    ["package:vector_math/vector_math_64.dart" :as vm]
    ["dart:math" :as math
     :refer [pi cos sin]]
    ["dart:async" :as async
     :refer [Completer StreamSubscription]]
    ["dart:isolate" :as di
     :refer [Isolate SendPort ReceivePort]]
    ["package:flutter/painting.dart" :as p]
    ["package:flutter/foundation.dart" :as fnd]
    ["dart:convert" :as convert]
    [clojure.walk :as walk]

    [tilton.mx.cell.base :as cb]
    [tilton.mx.api :as mx
     :refer [dp dpx cI cF cF+ cF+n cFn cFonce mget mget? mset! mswap! minfo fasc fasc-inc
             fmu muv fm* mav mx-bound? wmx-iso with-cc]]
    [tilton.fmx.api :as fx]))

(defn iso-ping [iso ^SendPort port priority response]
  (let [res (convert/jsonEncode
                   (walk/stringify-keys response))]
    (.ping ^Isolate iso port
      .response res
      .priority priority)))

(defn m99 [n]
  (str (quot n 1000000) "m" (mod n 1000000)))

(defn iso-name
  ([] (iso-name (Isolate.current)))
  ([iso] (when iso
           (try (.-debugName ^io/Isolate iso)
                (catch Error e
                  "DEAD!!!")))))
(defn dbgiso
  "A handy Iso debugger that gracefully handles dead Isos"
  ([tag] (dbgiso tag Isolate.current))
  ([tag iso] (dp :iso! tag (iso-name iso))))

(defn dbgisox
  "A silent hack"
  ([tag] (dbgisox tag nil))
  ([tag iso]))

(defn ^:async say-delay [n tag]
  (when-not (zero? n)
    (dp :iso (iso-name) :delaying n :tag tag)
    (await (Future.delayed (Duration .seconds n)))
    (dp :iso (iso-name) :delayed :tag tag)))

;;; --- test jobs --------------------------------------------------

(defn just-slow-is-prime? [n]
  (dpx :slow-is-prime-entry n
    :processors (when (not (fx/is-web?)) io/Platform.numberOfProcessors))
  (cond
    (= n 1) false
    :else (not (some (fn [divisor]
                       (zero? (mod n divisor)))
                 (range 2 n)))))

(defn slow-is-prime? [n]
  (dpx :slow-is-prime-entry n
    :processors (when (not (fx/is-web?)) io/Platform.numberOfProcessors))
  {:of     n
   :prime? (just-slow-is-prime? n)})

(defn slow-next-prime-after [n]
  (some (fn [nn]
          (when (slow-is-prime? nn)
            nn))
    (drop (inc (or n 1)) (range))))

(defn clock-face
  ([] (clock-face 400))
  ([size]
   (fx/custom-paint
     {:size    (m/Size size size)
      :painter (cF (let [tick (mget me :tick)]
                     (reify :extends (m/CustomPainter)
                       (paint [this ^Canvas canvas ^Size size]
                         (let [center (.center size (m/Offset 0 0))
                               radius (- (/ (.-width size) 2) 24)
                               pin-p (doto (m/Paint)
                                       (-> .-color (set! m/Colors.grey.shade400))
                                       (-> .-style (set! m/PaintingStyle.fill)))
                               dial-p (doto (m/Paint)
                                        (-> .-color (set! m/Colors.grey))
                                        (-> .-style (set! m/PaintingStyle.stroke)))
                               hand-p (doto (m/Paint)
                                        (-> .-color (set! m/Colors.red))
                                        (-> .-strokeWidth (set! 1.0))
                                        (-> .-style (set! m/PaintingStyle.stroke)))
                               hand-len (* radius 0.9)
                               hand-angle (/ tick 10.0)
                               hand-end (m/Offset
                                          (+ (.-dx center) (* hand-len
                                                             (cos (/ (* hand-angle pi) 180))))
                                          (+ (.-dy center) (* hand-len
                                                             (sin (/ (* hand-angle pi) 180)))))]
                           ;
                           ; (dp :center center)
                           (.drawCircle ^Canvas canvas center radius dial-p)
                           (.drawLine ^Canvas canvas center hand-end hand-p)
                           (.drawCircle ^Canvas canvas center 10 pin-p)
                           ))
                       (shouldRepaint [this _] true))))}
     {:tick  (cI 0)
      :clock (cF+ [:on-quiesce (fn [c] (when-let [tmr ^async/Timer (cb/c-value c)]
                                         (.cancel tmr)))]
               (async/Timer.periodic (Duration .milliseconds 10)
                 (fn [^async/Timer tmr]
                   (wmx-iso
                     (mset! me :tick (.-tick tmr))))))})))

