(ns example.demo.isolate.ixp.ixp
  (:require
    ["package:flutter/material.dart" :as m]
    ["package:flutter/painting.dart" :as p]
    ["package:flutter/widgets.dart" :as w]
    ["dart:io" :as io]
    ["dart:async" :as async
     :refer [Completer StreamSubscription]]
    ["dart:convert" :as convert]
    [clojure.string :as str]
    [clojure.walk :as walk]
    [tilton.mx.util :as util]
    [tilton.mx.api :as mx
     :refer [dp dpx cI cF cF+ cF+n cFn cFonce mget mget? mset!
              mav mx-bound? wmx-iso millis-now or-mx-bound]]
    [tilton.fmx.api :as fx
     :refer [scaffold app-bar text center column hero material-app
             container row expanded icon padding opacity ignore-pointer
             checkbox-list-tile icon-button fx-render dart-cb]]
    [example.demo.isolate.common :as cmn
     :refer [clock-face slow-is-prime? just-slow-is-prime? dbgiso dbgisox say-delay iso-ping]]
    [example.demo.isolate.ixp.iso-control
     :refer [decide-in-run decide-in-main decide-in-compute worker-msg-display]]
    [example.demo.isolate.ixp.spawn-control :as spawn
     :refer [on-off pause-resume kill ping start-paused request-spawn-exit request-spawn-throw
             iso-health decide-in-spawn]]
    [example.demo.isolate.ixp.health :refer [mk-health-monitor]]
    ["dart:isolate" :as di
     :refer [Isolate SendPort Capability ReceivePort]]))

(defn slo-prime-worker-listener [to-main {:keys [msg-type n] :as task}]
  (cond
    (string? task)
    (slo-prime-worker-listener to-main (util/dart-map->cljd-map
                                         (convert/jsonDecode task)))
    :else (case msg-type
            :decide-prime (.send ^SendPort to-main
                            {:msg-type :prime-decision
                             :method   "Iso.spawn"
                             :n        n
                             :value    (and
                                         (cmn/just-slow-is-prime? n)
                                         (cmn/just-slow-is-prime? n))})
            "ping" (do (dp :acking-ping-on-port (.-hashCode to-main))
                       (.send ^SendPort to-main
                         {:msg-type :ping-ack
                          :response (:response task)}))
            "health-check" (.send ^SendPort to-main
                             {:msg-type :health-check-ack
                              :response task})
            :exit (Isolate.exit)
            :throw (throw (Exception (str "Threw " (:value task) " on request.")))
            ; else
            (dp :worker-IGNORES-unrecognized-task task))))

(defn slo-prime-worker [{:keys [msg-type ^SendPort to-main] :as start}]
  (let [from-main (ReceivePort)]
    (.send to-main {:msg-type :config
                    :to-iso   (.-sendPort from-main)})
    (.listen from-main
      (fn [msg]
        (slo-prime-worker-listener to-main msg)))))

;;; --- make app ----------------------------------------

(def +prime-checks+ [9000039 9000041])

(defonce HEALTH-CHK-INTERVAL 200)

(defn make-app []
  (fx/material-app {}
    {:name           :app
     :worker-msg     (cI nil)
     ; --- Iso.spawn, for long-lived iso, performing multiple tasks, pausing

     :start-paused?  (cI false)
     :iso-up?        (cI false)
     :spawn-iso      (cF+ [:async? true
                           :watch (fn [_ me new-iso prior _]
                                    (when (dart/is? prior Isolate)
                                      (.kill ^Isolate prior))
                                    (wmx-iso
                                      (mset! me :resume-cap
                                        (when new-iso
                                          (.-pauseCapability ^Isolate new-iso)))))]
                       (when (mget me :iso-up?)
                         (Isolate.spawn
                           slo-prime-worker {:msg-type :config
                                             :to-main  (.-sendPort ^ReceivePort (mget me :from-iso))}
                           .paused (mx/without-c-dependency
                                     (mget me :start-paused?))
                           .onExit (.-sendPort ^ReceivePort (mget me :on-exit))
                           .onError (.-sendPort ^ReceivePort (mget me :on-error)))))
     :from-iso       (cF+ [:watch (fn [_ me new-iso prior _]
                                    (when (dart/is? prior ReceivePort)
                                      (dp :WATCH-port-close prior)
                                      (.close ^ReceivePort prior)))]
                       (when (mget me :iso-up?)
                         ; cannot use a receiver twice
                         (ReceivePort)))
     :to-iso         (cI nil)

     :main-listener  (cF+ [:watch (fn [_ _ _ prior _]
                                    ;; TODO handle listeners automatically %w
                                    (when (dart/is? prior StreamSubscription)
                                      (dp :PRIOR-cancelling-main prior)
                                      (.cancel ^StreamSubscription prior)))
                           :on-quiesce (fn [c] (when-let [tmr ^async/Timer (mx/c-value c)]
                                                 (dp :ONQ-main-cancel!!!!!!!!!!!!!!!)
                                                 (.cancel tmr)))]
                       (when-let [iso (mget me :spawn-iso)]
                         (.listen ^ReceivePort (mget me :from-iso)
                           (fn [{:keys [to-iso] :as result}]
                             (wmx-iso
                               (case (:msg-type result)
                                 :config (mset! me :to-iso (:to-iso result))
                                 (mset! me :worker-msg result)))))))

     :health-monitor (cF (when-let [iso (mget me :spawn-iso)]
                           (when-let [to-iso (mget me :to-iso)]
                             (when (not (mav :iso-paused?))
                               (mx/with-mx-edge [me :health-monitor]
                                 (mk-health-monitor me iso to-iso))))))

     ; --- pausing ---------------------------------------------------
     :resume-cap     (cI nil)
     :iso-paused?    (cF+n [:watch (fn [_ me paused? prior _]
                                     (when-let [iso ^Isolate? (mget me :spawn-iso)]
                                       (when (mx-bound? prior)
                                         (cond
                                           paused? (let [resumer (.pause iso)]
                                                     (wmx-iso
                                                       (mset! me :resume-cap resumer)))
                                           :else (let [resumer (mget me :resume-cap)
                                                       res2 (.-pauseCapability ^Isolate iso) ;; bad idea
                                                       ;; res2 would work only on iso started paused, only once
                                                       ]
                                                   (.resume iso resumer)
                                                   (wmx-iso
                                                     (mset! me :resume-cap nil)))))))]
                       (mget me :start-paused?))

     ; Iso.run support
     :run-job        (cI nil :ephemeral? true)
     :runner         (cF+ [:async? true
                           :watch (fn [_ me new prior _]
                                    (when (not (nil? new))
                                      (mx/with-cc :runner-res
                                        (mset! me :worker-msg new))))]
                       (when-let [{:keys [n] :as job} (mget me :run-job)]
                         (Isolate.run (fn []
                                        {:msg-type :prime-decision
                                         :method   "Iso.run"
                                         :n        n
                                         :value    (just-slow-is-prime? n)}))))

     ; clean-up
     :on-exit        (cF+ [:watch (fn [_ me new _ _]
                                    (.listen ^ReceivePort new
                                      (fn [msg]
                                        (dp :ON-exit!!!!!! msg)
                                        (wmx-iso (mset! me :iso-up? false)))))]
                       (ReceivePort))
     :on-error       (cF+ [:watch (fn [_ me new _ _]
                                    (.listen ^ReceivePort new
                                      (fn [^List msg]
                                        (dp :ON-error!!!!!! msg)
                                        (wmx-iso (mset! me :worker-msg
                                                   {:msg-type :alert
                                                    :msg      (subs (nth (.take msg 1) 0) 10)})))))]
                       (ReceivePort))}
    (scaffold
      {:appBar (app-bar {:title           (fx/text "Isolate Explorer")
                         :backgroundColor m/Colors.pink.shade50})}
      (column
        (clock-face 196)
        (m/Text "n.b. Clock freezes only if main is busy.")

        (app-section
          (even-row
            (start-paused)
            (iso-health))
          (even-row
            (on-off) (pause-resume) (kill))
          (even-row
            (ping Isolate.immediate "Ponged immediate")
            (ping Isolate.beforeNextEvent "Ponged beforeNextEvent"))
          (even-row
            (request-spawn-exit) (request-spawn-throw))
          (even-row (for [n +prime-checks+]
                      (decide-in-spawn n))))

        (app-section
          (even-row (for [n +prime-checks+]
                      (decide-in-main n)))
          (even-row (for [n +prime-checks+]
                      (decide-in-compute n)))
          (even-row (for [n +prime-checks+]
                      (decide-in-run n))))

        (app-section
          (worker-msg-display))))))

(defmacro even-row [& parts]
  `(row {:mainAxisAlignment m/MainAxisAlignment.spaceEvenly}
     ~@parts))

(defmacro app-section [& parts]
  `(column
     (m/Divider .thickness 0.5 .color m/Colors.grey)
     ~@parts))

