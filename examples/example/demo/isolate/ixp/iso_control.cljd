(ns example.demo.isolate.ixp.iso-control
  (:require
    ["package:flutter/material.dart" :as m]
    ["package:flutter/painting.dart" :as p]
    ["package:flutter/widgets.dart" :as w]
    ["package:flutter/foundation.dart" :as fnd]
    ["dart:convert" :as convert]
    ["dart:math" :as math]
    [clojure.string :as str]
    [clojure.walk :as walk]
    [tilton.mx.api :as mx
     :refer [dp dpx cI cF cF+ mget mget? mset! mswap! minfo fasc
             mav with-cc millis-now or-mx-bound]]
    [tilton.fmx.api :as fx
     :refer [scaffold app-bar text center column hero material-app
             container row expanded icon padding opacity ignore-pointer
             checkbox-list-tile icon-button fx-render dart-cb]]

    ["dart:isolate" :as di
     :refer [Isolate SendPort ReceivePort]]
    [example.demo.isolate.common
     :refer [clock-face slow-is-prime? just-slow-is-prime?
             dbgiso iso-name say-delay m99 iso-ping]]
    [example.demo.isolate.ixp.common :refer [result-clear]]))

;;; --- job starters -----------

(defn decide-in-main [n]
  (fx/elevated-button
    {:onPressed (cF (dart-cb []
                      (result-clear)
                      (doto (.-instance m/WidgetsBinding)
                        (.addPostFrameCallback
                          (fn [^Duration d]
                            (mset! (fasc :app) :worker-msg
                              {:msg-type :prime-decision
                               :method   "Main.iso"
                               :n        n
                               :value    (just-slow-is-prime? n)}))))))}
    (m/Text (str "Main " (m99 n)))))

(defn decide-in-compute [n]
  (fx/elevated-button
    {:onPressed (cF (dart-cb []
                      (result-clear)
                      (mset! me :compute? true)))}
    {:compute? (cI false :ephemeral? true)
     :result   (cF+ [:async? true
                     :watch (fn [_ me new _ _]
                              (when (not (nil? new))
                                (with-cc :worker-res
                                  (mset! (fasc :app) :worker-msg
                                    {:msg-type :prime-decision
                                     :method "fnf/compute"
                                     :n        n
                                     :value    new}))))]
                 (when (mget me :compute?)
                   (fnd/compute just-slow-is-prime? n)))}
    (m/Text (str "Compute " (m99 n)))))

(defn decide-in-run [n]
  (fx/elevated-button
    {:onPressed (dart-cb []
                  (result-clear)
                  (mset! (fasc :app) :run-job
                    {:msg-type :decide-prime
                     :n n
                     :id (millis-now)
                     :method "Iso.run"}))}
    (m/Text (str "Iso.run " (m99 n)))))

;;; --- worker result -----------------------------------------------

(defn worker-msg-display []
  (text {:style (p/TextStyle .fontSize 16)}
    (let [{:keys [method msg-type n value] :as result} (mav :worker-msg)]
      (dpx :result msg-type n value method)
      (case msg-type
        :prime-decision (str (or method "Anon") " says " (or n "NIL") " is " (when-not value "NOT ") "prime.")
        :ping-ack (:response result)
        :alert (:msg result)
        :clear "..."
        (or-mx-bound _cache "<rsn>")))))

