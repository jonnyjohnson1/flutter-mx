(ns example.demo.isolate.x01-simple-bidirectional-link
  "Flutter/MX port of example 2 of https://plugfox.dev/mastering-isolates/"
  (:require
    ["package:flutter/material.dart" :as m]
    ["package:flutter/painting.dart" :as p]
    ["package:flutter/widgets.dart" :as w]
    [clojure.string :as str]
    [tilton.mx.api :as mx
     :refer [dp dpx cI cF cF+ cF+n cFn cFonce mget mget? mset! mswap! minfo fasc fasc-inc
             fmu muv fm* mav mx-bound? wmx-iso with-cc]]
    [tilton.fmx.api :as fx
     :refer [scaffold app-bar text center column hero material-app
             container row expanded icon padding opacity ignore-pointer
             checkbox-list-tile icon-button fx-render dart-cb]]
    [example.demo.isolate.common :as cmn
     :refer [dbgiso]]
    ["dart:async" :as async
     :refer [Completer StreamSubscription]]
    ["dart:isolate" :as di
     :refer [Isolate SendPort ReceivePort]]))

;;; Inspired by Plague Fox, Example 2: https://plugfox.dev/mastering-isolates/

;;; Note: this version remains for historical reasons only

(defn make-app []
  (fx/material-app
    {:title "Mastering Isolates #2"}
    {:result-port         (ReceivePort)
     :worker-iso          (cF+ [:async? true]
                            (Isolate.spawn
                              (fn entry-point [^SendPort sp-to-main]
                                (let [task-port (ReceivePort)]
                                  (.send sp-to-main (.-sendPort task-port))
                                  (.listen task-port (fn [message]
                                                       (when (int? message)
                                                         (let [r (atom 1)]
                                                           (doseq [i (range 1 (inc message))]
                                                             (swap! r * i)
                                                             (.send sp-to-main (str i "! = " @r)))))))))
                              (.-sendPort ^ReceivePort (mget me :result-port))))
     :main-listener       (cF+ []
                            (when (mget me :worker-iso)
                              (.listen ^ReceivePort (mget me :result-port)
                                (fn [message]
                                  (cond
                                    (dart/is? message SendPort)
                                    (wmx-iso
                                      (mset! me :task-to-worker-port message))
                                    (string? message)
                                    (dp :main-hears-string!! message)
                                    :else (throw (Exception. (str "main got unexpected!!!! " message))))))))
     :task-to-worker-port (cI nil :watch (fn [_ me new _ _]
                                           (when new
                                             (dp :task-to-worker-port-watch new))))
     :dispatcher          (cF (when-let [t2w (mget me :task-to-worker-port)]
                                (.send ^SendPort t2w 5))) ; <======== BINGO! task dispatch
     :clean-up            (cF+ [:async? true
                                :watch (fn [_ me new prior _]
                                         (when (= new :fini)
                                           (.close ^ReceivePort (mget me :result-port))
                                           (.kill ^Isolate (mget me :worker-iso))))]
                            ; good enough for now.
                            (Future.delayed (Duration .seconds 3) (fn [] :fini)))
     }
    (fx/scaffold
      {:appBar (fx/app-bar {:title (fx/text "Simple BidirectionalLink")})})))
