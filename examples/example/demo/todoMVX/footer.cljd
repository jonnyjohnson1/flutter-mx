(ns example.demo.todoMVX.footer
  (:require
    ["package:flutter/widgets.dart" :as w]
    ["package:flutter/material.dart" :as m]
    ["package:flutter/painting.dart" :as p]

    [tilton.mx.base :refer [dprn dp dpx]]
    [tilton.mx.api :refer [mav mget mset! mswap! mkids cI cF]]
    [tilton.fmx.api :refer [dart-cb my-app] :as fx]

    [example.demo.todoMVX.common :as cmm
     :refer [my-todo-list]]
    [example.demo.todoMVX.todo :refer [td-completed] :as todo]))

(defn items-remaining-display []
  (fx/text {} {:name :remaining}
    (if-let [td-lst (my-todo-list)]
      (let [remaining (remove td-completed (mkids td-lst))]
        (str (count remaining)
          " item"
          ;; the spec is clear about the smart "s" detail
          (when (not= 1 (count remaining)) "s")))
      ;;; text widget won't take nil, so...
      "")))

(defn completion-filters []
  (fx/row
    {;; map one is for Flutter widget properties, using Flutter camelCase keywords
     :mainAxisAlignment m/MainAxisAlignment.spaceEvenly}
    {;; map two is for application semantics
     ;; naming MX objects lets search the application "database" symbolically
     :name      :completions
     ;; the prototype nature of MX lets us define state as needed by any app widget.
     ;; Here we see that widget named ":completions", property ":selection", will be the
     ;; app source of truth for that user option.
     :selection (cI :all)}
    ;; further expressions yield children for the Flutter row. FlutterMX provides the ":children" property.
    (let [selector me
          ;; ^^^ just binding "me" more readably, and to have it handy in nested rules
          ;; where "me" is no longer this :completions object, so they do not have to navigate to it.
          ;; This trick rarely gets used.
          choice (fn [completion-enum label]
                   (fx/text-button
                     {:onPressed (dart-cb []
                                   (mset! selector
                                     :selection completion-enum))
                      :style     (cF (m/ButtonStyle .foregroundColor
                                       (m/MaterialStateProperty.resolveWith
                                         (fn [s]
                                           (if (mget me :selected?)
                                             m/Colors.blue m/Colors.black)))))}
                     {:selected? (cF (= completion-enum
                                       (mget selector :selection)))}
                     (m/Text label)))]
      [(choice :all "All")
       (choice :active "Active")
       (choice :done "Done")])))

(defn clear-completed-button []
  (fx/visibility
    {:visible           (cF (if-let [tds (todo/app-todos (my-app))]
                              (boolean                      ;; FL wants explicit boolean
                                (some td-completed tds))
                              ;; nb might still be loading initially
                              false))
     :maintainSize      true
     :maintainAnimation true
     :maintainState     true}
    (fx/text-button
      {:onPressed (dart-cb []
                    (mswap! (my-todo-list) :kids
                      (partial remove td-completed)))}
      (fx/text "Clear"))))

;;; --- full footer --------------------------------------------

(defn todos-dashboard []
  (fx/row
    {:mainAxisAlignment m/MainAxisAlignment.center}
    (fx/expanded {:flex 1} (items-remaining-display))
    (fx/expanded {:flex 3} (completion-filters))
    (fx/expanded {:flex 1} (clear-completed-button))))