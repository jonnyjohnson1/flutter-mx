(ns example.demo.todoMVX.input
  (:require
    ["package:flutter/widgets.dart" :as w]
    ["package:flutter/material.dart" :as m]
    ["package:flutter/painting.dart" :as p]
    ["package:supabase_flutter/supabase_flutter.dart" :as supabase]
    [clojure.string :as str]
    [tilton.mx.base :refer [dprn dp dpx]]
    [tilton.mx.api :as mx :refer [cF cI cF+ cFonce muv fmu mav mget mswap! mset!]]
    [tilton.fmx.api :refer [dart-cb my-app] :as fx]
    [example.demo.todoMVX.common :refer [my-todo-list] :as cmm]
    [example.demo.todoMVX.state :refer [td-completed] :as todo]))

(defn todo-input-onSubmitted-formula [host ctx]
  (cF (dart-cb [value]
        ;; blank or not we need to restore focus to the input per the spec
        (.requestFocus ^m/FocusNode (mget me :focusNode))
        ;; spec says to trim, and to silently ignore blank entry
        (let [trimmed (str/trim value)]
          (when-not (str/blank? trimmed)
            ;; --- we have a non-blank entry, so we save, clear entry, and store
            (mset! me :value trimmed)                       ;; let text proxy know its cleaned value
            (.clear ^m/TextEditingController
              (mget me :controller))
            (let [td-lst (mx/mget (tilton.mx.model.core/fasc :app host)
                           :todo-list)]
              (mswap! td-lst :kids conj
                (todo/make-ToDo td-lst trimmed))
              (.pop (m/Navigator.of ctx))))))))

(defn todo-input [host ctx]
  (fx/material
    {:elevation   2.0
     :color       m/Colors.blue
     :shadowColor m/Colors.black}
    (fx/text-field {:autofocus   true
                    :focusNode   (m/FocusNode)
                    :decoration  (m/InputDecoration
                                   .hintText "What else needs doing?"
                                   .border m.InputBorder/none
                                   .contentPadding (m/EdgeInsets.all 9.0))
                    :onSubmitted (todo-input-onSubmitted-formula host ctx)
                    :controller  (cFonce (fx/text-field-controller-basic me))}
      {:name  :todo-input
       :value (cI "")})))

(defn todo-toggle-all []
  (fx/visibility
    {:visible               (cF (boolean
                                  (seq (todo/app-todos (my-app)))))
     :maintainSize          true
     :maintainSemantics     false
     ;; todo why do not other visis specify these ^^^ vv?
     :maintainInteractivity false
     :maintainAnimation     true
     :maintainState         true}
    {:name :togg-vis}
    (fx/icon-button
      {:onPressed (dart-cb []
                    (let [todos (todo/app-todos (my-app))
                          all-done? (every? td-completed todos)]
                      (doseq [td todos]
                        ;; todo do all these in one change pulse
                        (mset! td :completed (if all-done? false true)))))
       :icon      (fx/icon
                    {:color (cF (if (every? td-completed (todo/app-todos (my-app)))
                                  m/Colors.black m/Colors.blueGrey))}
                    m.Icons/expand_more)})))

(defn todo-capture-icon []
  (fx/builder                                               ;; <== needed to pull better context into widget tree for showDialog
    (fx/icon-button
      {:icon      (m/Icon m.Icons/add .color m/Colors.black)
       :onPressed (dart-cb []                               ;; <== expands to  (with-ctx [me ctx] (fn [] ~@body))
                    (let [host-md me
                          todo-controller (m/TextEditingController.)
                          date-controller (m/TextEditingController.)
                          location-controller (m/TextEditingController.)
                          is-save-disabled (fn [] (str/blank? (.-text todo-controller)))]
                      (m/showDialog
                        .context ctx
                        .builder (fn [ctx]
                                   (fx/fx-render ctx
                                     (fx/alert-dialog
                                       (fx/column {:mainAxisSize m/MainAxisSize.min}
                                         (todo-input host-md ctx)
                                         (fx/row
                                           {:mainAxisAlignment m/MainAxisAlignment.center}
                                           (fx/text-button
                                             {:onPressed #(-> ctx m/Navigator.of .pop)}
                                             (m/Text "Cancel"))
                                           (fx/text-button
                                             {:onPressed (cF (when-let [raw (muv :todo-input)]
                                                               (let [to-do (str/trim raw)]
                                                                 (when-not (str/blank? to-do)
                                                                   ;; --- we have a non-blank entry, so we save, clear entry, and store
                                                                   (dart-cb []
                                                                     (let [td-lst (my-todo-list host-md)]
                                                                       (mswap! td-lst :kids conj
                                                                         (todo/make-ToDo td-lst to-do)))
                                                                     (-> ctx m/Navigator.of .pop))))))}
                                             (m/Text "Save"))))))))))})))

(defn todo-broadcast-icon []
  (fx/builder
    (fx/icon-button
      {:icon      (m/Icon m.Icons/podcasts)
       :onPressed (dart-cb []
                    (let [^supabase/RealtimeChannel ch (mget (my-app) :todo-ch)
                          payload (Map)]
                      (. payload "[]=" "message" "Hello, Dart!")
                      (let [sbm (.sendBroadcastMessage ^supabase/RealtimeChannel ch
                                  .event "test"
                                  .payload payload)]
                        (dp :sent!!!!! sbm)
                        (dp :sentawait!!!!! (await sbm)))))})))